{"ast":null,"code":"// Utility functions for WireMock GUI\n\n// Format date to locale string\nexport const formatDate = dateString => {\n  return new Date(dateString).toLocaleString();\n};\n\n// Get Bootstrap badge color for HTTP method\nexport const getMethodColor = method => {\n  const colors = {\n    'GET': 'primary',\n    'POST': 'success',\n    'PUT': 'warning',\n    'DELETE': 'danger',\n    'PATCH': 'info'\n  };\n  return colors[method] || 'secondary';\n};\n\n// Get Bootstrap badge color for HTTP status code\nexport const getStatusColor = status => {\n  if (status >= 200 && status < 300) return 'success';\n  if (status >= 300 && status < 400) return 'info';\n  if (status >= 400 && status < 500) return 'warning';\n  if (status >= 500) return 'danger';\n  return 'secondary';\n};\n\n// Pretty print JSON with error handling\nexport const prettyPrintJson = body => {\n  try {\n    const parsed = JSON.parse(body);\n    return JSON.stringify(parsed, null, 2);\n  } catch (e) {\n    return body; // Return as-is if not valid JSON\n  }\n};\n\n// Format body based on pretty print flag\nexport const formatBody = (body, prettyPrint) => {\n  return prettyPrint ? prettyPrintJson(body) : body;\n};","map":{"version":3,"names":["formatDate","dateString","Date","toLocaleString","getMethodColor","method","colors","getStatusColor","status","prettyPrintJson","body","parsed","JSON","parse","stringify","e","formatBody","prettyPrint"],"sources":["/home/sbrodziansky/Repositories/wiremock-gui/src/utils/helpers.js"],"sourcesContent":["// Utility functions for WireMock GUI\n\n// Format date to locale string\nexport const formatDate = (dateString) => {\n    return new Date(dateString).toLocaleString();\n};\n\n// Get Bootstrap badge color for HTTP method\nexport const getMethodColor = (method) => {\n    const colors = {\n        'GET': 'primary',\n        'POST': 'success',\n        'PUT': 'warning',\n        'DELETE': 'danger',\n        'PATCH': 'info'\n    };\n    return colors[method] || 'secondary';\n};\n\n// Get Bootstrap badge color for HTTP status code\nexport const getStatusColor = (status) => {\n    if (status >= 200 && status < 300) return 'success';\n    if (status >= 300 && status < 400) return 'info';\n    if (status >= 400 && status < 500) return 'warning';\n    if (status >= 500) return 'danger';\n    return 'secondary';\n};\n\n// Pretty print JSON with error handling\nexport const prettyPrintJson = (body) => {\n    try {\n        const parsed = JSON.parse(body);\n        return JSON.stringify(parsed, null, 2);\n    } catch (e) {\n        return body; // Return as-is if not valid JSON\n    }\n};\n\n// Format body based on pretty print flag\nexport const formatBody = (body, prettyPrint) => {\n    return prettyPrint ? prettyPrintJson(body) : body;\n};\n"],"mappings":"AAAA;;AAEA;AACA,OAAO,MAAMA,UAAU,GAAIC,UAAU,IAAK;EACtC,OAAO,IAAIC,IAAI,CAACD,UAAU,CAAC,CAACE,cAAc,CAAC,CAAC;AAChD,CAAC;;AAED;AACA,OAAO,MAAMC,cAAc,GAAIC,MAAM,IAAK;EACtC,MAAMC,MAAM,GAAG;IACX,KAAK,EAAE,SAAS;IAChB,MAAM,EAAE,SAAS;IACjB,KAAK,EAAE,SAAS;IAChB,QAAQ,EAAE,QAAQ;IAClB,OAAO,EAAE;EACb,CAAC;EACD,OAAOA,MAAM,CAACD,MAAM,CAAC,IAAI,WAAW;AACxC,CAAC;;AAED;AACA,OAAO,MAAME,cAAc,GAAIC,MAAM,IAAK;EACtC,IAAIA,MAAM,IAAI,GAAG,IAAIA,MAAM,GAAG,GAAG,EAAE,OAAO,SAAS;EACnD,IAAIA,MAAM,IAAI,GAAG,IAAIA,MAAM,GAAG,GAAG,EAAE,OAAO,MAAM;EAChD,IAAIA,MAAM,IAAI,GAAG,IAAIA,MAAM,GAAG,GAAG,EAAE,OAAO,SAAS;EACnD,IAAIA,MAAM,IAAI,GAAG,EAAE,OAAO,QAAQ;EAClC,OAAO,WAAW;AACtB,CAAC;;AAED;AACA,OAAO,MAAMC,eAAe,GAAIC,IAAI,IAAK;EACrC,IAAI;IACA,MAAMC,MAAM,GAAGC,IAAI,CAACC,KAAK,CAACH,IAAI,CAAC;IAC/B,OAAOE,IAAI,CAACE,SAAS,CAACH,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;EAC1C,CAAC,CAAC,OAAOI,CAAC,EAAE;IACR,OAAOL,IAAI,CAAC,CAAC;EACjB;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,UAAU,GAAGA,CAACN,IAAI,EAAEO,WAAW,KAAK;EAC7C,OAAOA,WAAW,GAAGR,eAAe,CAACC,IAAI,CAAC,GAAGA,IAAI;AACrD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}